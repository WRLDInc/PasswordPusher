version: '3.8'

x-op-app-environment: &x-op-app-environment
  environment:
    # Database connection (uses environment variables from .env or Coolify)
    DATABASE_URL: ${DATABASE_URL:-postgres://pwpush_user:pwpush_passwd@db:5432/pwpush_db}
    
    # Rails environment
    RAILS_ENV: ${RAILS_ENV:-production}
    
    # Password Pusher Configuration
    # These can be set in Coolify's environment variables
    PWP__ENABLE_LOGINS: ${PWP__ENABLE_LOGINS:-false}
    PWP__ENABLE_FILE_PUSHES: ${PWP__ENABLE_FILE_PUSHES:-true}
    PWP__ENABLE_URL_PUSHES: ${PWP__ENABLE_URL_PUSHES:-true}
    PWP__PW__EXPIRE_AFTER_DAYS_DEFAULT: ${PWP__PW__EXPIRE_AFTER_DAYS_DEFAULT:-7}
    PWP__PW__EXPIRE_AFTER_VIEWS_DEFAULT: ${PWP__PW__EXPIRE_AFTER_VIEWS_DEFAULT:-5}
    PWP__PW__RETRIEVAL_STEP_DEFAULT: ${PWP__PW__RETRIEVAL_STEP_DEFAULT:-true}
    
    # Host configuration (update in Coolify after domain setup)
    PWP__HOST_DOMAIN: ${PWP__HOST_DOMAIN}
    PWP__HOST_PROTOCOL: ${PWP__HOST_PROTOCOL:-https}
    
    # Secret key base (generate a secure one for production)
    SECRET_KEY_BASE: ${SECRET_KEY_BASE}

services:
  # The Password Pusher application
  pwpush:
    image: docker.io/pglombardo/pwpush:latest
    restart: unless-stopped
    ports:
      - "${PORT:-5100}:5100"
    <<: *x-op-app-environment
    depends_on:
      - db
    volumes:
      # Persistent storage for file uploads
      - pwpush_storage:/opt/PasswordPusher/storage:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5100/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # The Password Pusher worker: runs background jobs & periodic cleanup tasks
  worker:
    image: docker.io/pglombardo/pwpush-worker:latest
    restart: unless-stopped
    <<: *x-op-app-environment
    depends_on:
      - pwpush
      - db
    volumes:
      # Shared storage with main app
      - pwpush_storage:/opt/PasswordPusher/storage:rw

  # PostgreSQL database
  db:
    image: docker.io/postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pwpush_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pwpush_passwd}
      POSTGRES_DB: ${POSTGRES_DB:-pwpush_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pwpush_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  pwpush_storage:
    driver: local
